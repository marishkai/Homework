package com.example.dungeon.model;

import java.util.*;
import java.util.stream.Collectors;

public class Room {
    private final String name;
    private final String description;
    private final Map<String, Room> neighbors = new HashMap<>();
    private final List<Item> items = new ArrayList<>();
    private Monster monster;

    // –ü–æ–ª—è –¥–ª—è –∑–∞–ø–µ—Ä—Ç—ã—Ö –¥–≤–µ—Ä–µ–π
    private boolean locked = false;
    private String requiredKey;

    public Room(String name, String description) {
        this.name = name;
        this.description = description;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public Map<String, Room> getNeighbors() {
        return neighbors;
    }

    public void addNeighbor(String direction, Room room) {
        neighbors.put(direction, room);
    }

    public List<Item> getItems() {
        return items;
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void removeItem(Item item) {
        items.remove(item);
    }

    public Monster getMonster() {
        return monster;
    }

    public void setMonster(Monster monster) {
        this.monster = monster;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–∫–∞–º–∏
    public boolean isLocked() {
        return locked;
    }

    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    public String getRequiredKey() {
        return requiredKey;
    }

    public void setRequiredKey(String requiredKey) {
        this.requiredKey = requiredKey;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å —Å –¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
    public boolean canUnlockWith(String keyName) {
        return locked && requiredKey != null && requiredKey.equals(keyName);
    }

    // –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å (—Å–Ω—è—Ç—å –∑–∞–º–æ–∫)
    public void unlock() {
        if (locked) {
            locked = false;
            System.out.println("üîì –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞!");
        }
    }

    public String describe() {
        StringBuilder sb = new StringBuilder();
        sb.append("üìç ").append(name).append(": ").append(description);

        if (!items.isEmpty()) {
            sb.append("\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: ").append(items.stream()
                    .map(Item::getName)
                    .collect(Collectors.joining(", ")));
        }

        if (monster != null) {
            sb.append("\nüê∫ –í –∫–æ–º–Ω–∞—Ç–µ –º–æ–Ω—Å—Ç—Ä: ").append(monster.getName())
                    .append(" (—É—Ä. ").append(monster.getLevel())
                    .append(", HP: ").append(monster.getHp()).append(")");
        }

        if (locked && requiredKey != null) {
            sb.append("\nüîí –î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞! –ù—É–∂–µ–Ω –∫–ª—é—á: ").append(requiredKey);
        }

        if (!neighbors.isEmpty()) {
            sb.append("\nüö™ –í—ã—Ö–æ–¥—ã: ").append(String.join(", ", neighbors.keySet()));
        }

        return sb.toString();
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    public String serialize() {
        StringBuilder sb = new StringBuilder();
        sb.append(name).append(":")
                .append(description).append(":")
                .append(locked).append(":")
                .append(requiredKey != null ? requiredKey : "null").append(":");

        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω—Å—Ç—Ä–∞
        if (monster != null) {
            sb.append(monster.getName()).append(",")
                    .append(monster.getHp()).append(",")
                    .append(monster.getLevel());
        } else {
            sb.append("null");
        }
        sb.append(":");

        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        sb.append(items.stream()
                .map(item -> item.getClass().getSimpleName() + "=" + item.getName())
                .collect(Collectors.joining("|")));

        return sb.toString();
    }

    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
    public static Room deserialize(String data) {
        String[] parts = data.split(":", 6);
        if (parts.length < 6) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã");
        }

        Room room = new Room(parts[0], parts[1]);
        room.setLocked(Boolean.parseBoolean(parts[2]));

        if (!"null".equals(parts[3])) {
            room.setRequiredKey(parts[3]);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞
        if (!"null".equals(parts[4])) {
            String[] monsterData = parts[4].split(",");
            if (monsterData.length == 3) {
                Monster monster = new Monster(
                        monsterData[0],
                        Integer.parseInt(monsterData[2]), // level
                        Integer.parseInt(monsterData[1])  // hp
                );
                room.setMonster(monster);
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if (!parts[5].isEmpty()) {
            String[] itemsData = parts[5].split("\\|");
            for (String itemData : itemsData) {
                String[] itemParts = itemData.split("=", 2);
                if (itemParts.length == 2) {
                    switch (itemParts[0]) {
                        case "Potion" -> room.addItem(new Potion(itemParts[1], 5));
                        case "Key" -> room.addItem(new Key(itemParts[1]));
                        case "Weapon" -> room.addItem(new Weapon(itemParts[1], 3));
                    }
                }
            }
        }

        return room;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    public Room clone() {
        Room clone = new Room(name, description);
        clone.locked = this.locked;
        clone.requiredKey = this.requiredKey;

        if (this.monster != null) {
            clone.monster = new Monster(
                    this.monster.getName(),
                    this.monster.getLevel(),
                    this.monster.getHp()
            );
        }

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        for (Item item : this.items) {
            if (item instanceof Potion) {
                clone.items.add(new Potion(item.getName(), 5));
            } else if (item instanceof Key) {
                clone.items.add(new Key(item.getName()));
            } else if (item instanceof Weapon) {
                clone.items.add(new Weapon(item.getName(), 3));
            }
        }

        return clone;
    }

    @Override
    public String toString() {
        return name + " (" + description + ")";
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—ã—Ö–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    public boolean hasExit(String direction) {
        return neighbors.containsKey(direction);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    public List<String> getAvailableExits() {
        return new ArrayList<>(neighbors.keySet());
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    public boolean hasItem(String itemName) {
        return items.stream().anyMatch(item -> item.getName().equalsIgnoreCase(itemName));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
    public Optional<Item> findItem(String itemName) {
        return items.stream()
                .filter(item -> item.getName().equalsIgnoreCase(itemName))
                .findFirst();
    }
}
package com.example.dungeon.core;

import com.example.dungeon.model.*;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;
import java.io.UncheckedIOException;

public class Game {
    private final GameState state = new GameState();
    private final Map<String, Command> commands = new LinkedHashMap<>();
    private BufferedReader inputReader; // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ fight

    static {
        WorldInfo.touch("Game");
    }

    public Game() {
        registerCommands();
        bootstrapWorld();
    }

    private void registerCommands() {
        commands.put("help", (ctx, a) -> System.out.println("–ö–æ–º–∞–Ω–¥—ã: " + String.join(", ", commands.keySet())));

        commands.put("gc-stats", (ctx, a) -> {
            Runtime rt = Runtime.getRuntime();
            long free = rt.freeMemory(), total = rt.totalMemory(), used = total - free;
            System.out.println("–ü–∞–º—è—Ç—å: used=" + used + " free=" + free + " total=" + total);
        });

        commands.put("look", (ctx, a) -> System.out.println(ctx.getCurrent().describe()));

        commands.put("move", (ctx, a) -> {
            if (a.isEmpty()) throw new InvalidCommandException("move: —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (north/south/east/west)");
            String dir = a.get(0).toLowerCase(Locale.ROOT);
            Room cur = ctx.getCurrent();
            Room next = cur.getNeighbors().get(dir);

            if (next == null) throw new InvalidCommandException("–ù–µ–ª—å–∑—è –∏–¥—Ç–∏ –Ω–∞ " + dir + " –æ—Ç—Å—é–¥–∞.");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–µ—Ä—Ç–æ–π –¥–≤–µ—Ä–∏
            if (next.isLocked()) {
                System.out.println("–î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: " + next.getRequiredKey());
                return; // –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            }

            ctx.setCurrent(next);
            System.out.println("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ " + next.getName());
            System.out.println(next.describe());
        });

        commands.put("take", (ctx, a) -> {
            if (a.isEmpty()) throw new InvalidCommandException("take: —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞");
            String name = String.join(" ", a).trim();
            Room cur = ctx.getCurrent();
            Optional<Item> found = cur.getItems().stream()
                    .filter(i -> i.getName().equalsIgnoreCase(name))
                    .findFirst();
            if (found.isEmpty()) throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: " + name);
            Item it = found.get();
            cur.getItems().remove(it);
            ctx.getPlayer().getInventory().add(it);
            System.out.println("–í–∑—è—Ç–æ: " + it.getName());
        });

        commands.put("inventory", (ctx, a) -> {
            var inv = ctx.getPlayer().getInventory();
            if (inv.isEmpty()) {
                System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
                return;
            }
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
            inv.stream()
                    .collect(Collectors.groupingBy(
                            i -> i.getClass().getSimpleName() + ":" + i.getName(),
                            Collectors.counting()
                    ))
                    .entrySet().stream()
                    .sorted(Map.Entry.comparingByKey())
                    .forEach(entry -> {
                        String[] parts = entry.getKey().split(":");
                        System.out.println("- " + parts[0] + " (" + entry.getValue() + "): " + parts[1]);
                    });
        });

        commands.put("use", (ctx, a) -> {
            if (a.isEmpty()) throw new InvalidCommandException("use: —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞");
            String name = String.join(" ", a).trim();
            Player p = ctx.getPlayer();
            Optional<Item> found = p.getInventory().stream()
                    .filter(i -> i.getName().equalsIgnoreCase(name))
                    .findFirst();
            if (found.isEmpty()) throw new InvalidCommandException("–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: " + name);
            Item it = found.get();

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª—é—á–µ–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–µ–π –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
            if (it instanceof Key) {
                Room currentRoom = ctx.getCurrent();
                boolean doorUnlocked = false;

                for (Map.Entry<String, Room> entry : currentRoom.getNeighbors().entrySet()) {
                    Room neighbor = entry.getValue();
                    String direction = entry.getKey();

                    if (neighbor.isLocked() && neighbor.getRequiredKey() != null &&
                            neighbor.getRequiredKey().equals(it.getName())) {
                        System.out.println("üîë –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ '" + it.getName() + "', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å –≤ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ " + direction + "...");
                        neighbor.setLocked(false);
                        System.out.println("üîì –î–≤–µ—Ä—å –≤ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞!");
                        p.getInventory().remove(it); // –ö–ª—é—á –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        doorUnlocked = true;
                        break;
                    }
                }

                if (!doorUnlocked) {
                    System.out.println("–ö–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.");
                }
            } else {
                // –í—ã–∑–æ–≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ apply –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                it.apply(ctx);
            }
        });

        commands.put("fight", (ctx, a) -> {
            Room r = ctx.getCurrent();
            Monster m = r.getMonster();
            if (m == null) throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –±–æ—è.");

            Player p = ctx.getPlayer();
            System.out.println("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π —Å: " + m.getName() + " (—É—Ä. " + m.getLevel() + ", HP: " + m.getHp() + ")");

            // –õ–æ–≥ –±–æ—è –≤ —Ñ–∞–π–ª (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è try-with-resources)
            Path flog = Paths.get("fightlog.txt");
            try (BufferedWriter w = Files.newBufferedWriter(flog,
                    java.nio.file.StandardOpenOption.CREATE,
                    java.nio.file.StandardOpenOption.APPEND)) {

                w.write("=== Fight started with " + m.getName() + " ===\n");

                while (m.getHp() > 0 && p.getHp() > 0) {
                    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ 'fight' –¥–ª—è –∞—Ç–∞–∫–∏ –∏–ª–∏ 'run' –¥–ª—è –±–µ–≥—Å—Ç–≤–∞: ");
                    String action;
                    try {
                        action = inputReader.readLine().trim().toLowerCase();
                    } catch (IOException e) {
                        throw new InvalidCommandException("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: " + e.getMessage());
                    }

                    if ("run".equals(action)) {
                        System.out.println("–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è!");
                        w.write("–ò–≥—Ä–æ–∫ —Å–±–µ–∂–∞–ª –∏–∑ –±–æ—è\n");
                        return;
                    }

                    if (!"fight".equals(action)) {
                        System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞—Ç–∞–∫—É");
                        action = "fight";
                    }

                    // –ò–≥—Ä–æ–∫ –±—å—ë—Ç
                    int dmgToMonster = Math.max(0, p.getAttack());
                    m.setHp(m.getHp() - dmgToMonster);
                    String s1 = "–í—ã –±—å—ë—Ç–µ " + m.getName() + "–∞ –Ω–∞ " + dmgToMonster + ". HP –º–æ–Ω—Å—Ç—Ä–∞: " + Math.max(0, m.getHp());
                    System.out.println(s1);
                    w.write(s1 + "\n");

                    if (m.getHp() <= 0) {
                        String defeated = "–ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥—ë–Ω: " + m.getName();
                        System.out.println(defeated);
                        w.write(defeated + "\n");

                        // –¥—Ä–æ–ø –ª—É—Ç–∞
                        Potion loot = new Potion("–ó–µ–ª—å–µ", 3);
                        p.getInventory().add(loot);
                        String lootMsg = "–í—ã–ø–∞–ª–æ: " + loot.getName();
                        System.out.println(lootMsg);
                        w.write(lootMsg + "\n");

                        // —É–±—Ä–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                        r.setMonster(null);
                        // –Ω–∞—á–∏—Å–ª–∏–º –æ—á–∫–∏
                        ctx.addScore(10);
                        break;
                    }

                    // –ú–æ–Ω—Å—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (—É—Ä–æ–≤–µ–Ω—å –º–æ–Ω—Å—Ç—Ä–∞ –∫–∞–∫ —É—Ä–æ–Ω)
                    int dmgToPlayer = Math.max(0, m.getLevel());
                    p.setHp(p.getHp() - dmgToPlayer);
                    String s2 = "–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –Ω–∞ " + dmgToPlayer + " –ù–†. –í–∞—à–µ HP —Å–µ–π—á–∞—Å: " + Math.max(0, p.getHp());
                    System.out.println(s2);
                    w.write(s2 + "\n");

                    if (p.getHp() <= 0) {
                        String dead = "–í—ã –ø–æ–≥–∏–±–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.";
                        System.out.println(dead);
                        w.write(dead + "\n");
                        // –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –≤—ã—Ö–æ–¥–∞
                        SaveLoad.save(ctx);
                        // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        System.exit(0);
                    }

                }
            } catch (IOException e) {
                throw new UncheckedIOException("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –±–æ—è", e);
            }
        });

        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã GC
        commands.put("alloc", (ctx, a) -> {
            System.out.println("üßπ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Garbage Collector...");

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ
            Runtime rt = Runtime.getRuntime();
            long memoryBefore = rt.totalMemory() - rt.freeMemory();

            // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            List<String> tempObjects = new ArrayList<>();
            for (int i = 0; i < 100000; i++) {
                tempObjects.add("–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç " + i + " " + UUID.randomUUID() + " —Å–æ–∑–¥–∞–Ω –≤ " + new Date());
            }

            long memoryAfterAlloc = rt.totalMemory() - rt.freeMemory();
            System.out.println("–°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: " + tempObjects.size());
            System.out.println("–ü–∞–º—è—Ç—å –¥–æ: " + memoryBefore + " –±–∞–π—Ç");
            System.out.println("–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è: " + memoryAfterAlloc + " –±–∞–π—Ç");

            // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
            tempObjects = null;

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ GC
            System.gc();
            try { Thread.sleep(1000); } catch (InterruptedException e) {} // –î–∞–µ–º –≤—Ä–µ–º—è GC

            long memoryAfterGC = rt.totalMemory() - rt.freeMemory();
            System.out.println("–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ GC: " + memoryAfterGC + " –±–∞–π—Ç");
            System.out.println("–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: " + (memoryAfterAlloc - memoryAfterGC) + " –±–∞–π—Ç");
        });

        commands.put("save", (ctx, a) -> SaveLoad.save(ctx));
        commands.put("load", (ctx, a) -> SaveLoad.load(ctx));
        commands.put("scores", (ctx, a) -> SaveLoad.printScores());

        commands.put("debug", (ctx, a) -> {
            System.out.println("=== –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===");
            System.out.println("–ò–≥—Ä–æ–∫: " + ctx.getPlayer().getName() +
                    " HP: " + ctx.getPlayer().getHp() +
                    " –ê—Ç–∞–∫–∞: " + ctx.getPlayer().getAttack());
            System.out.println("–û—á–∫–∏: " + ctx.getScore());
            System.out.println("–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: " + ctx.getCurrent().getName());
            System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: " + ctx.getPlayer().getInventory().size() + " –ø—Ä–µ–¥–º–µ—Ç–æ–≤");

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            if (!ctx.getPlayer().getInventory().isEmpty()) {
                System.out.println("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:");
                ctx.getPlayer().getInventory().forEach(item ->
                        System.out.println("  - " + item.getName() + " (" + item.getClass().getSimpleName() + ")"));
            }
        });

        commands.put("about", (ctx, a) -> {
            System.out.println("DungeonMini ‚Äî —É—á–µ–±–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è RPG –∏–≥—Ä–∞");
            System.out.println("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –±–æ–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ");
            System.out.println("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: Stream API, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, try-with-resources");
        });

        commands.put("exit", (ctx, a) -> {
            System.out.println("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
            SaveLoad.save(ctx);
            System.out.println("–ü–æ–∫–∞!");
            System.exit(0);
        });
    }

    private void bootstrapWorld() {
        Player hero = new Player("–ì–µ—Ä–æ–π", 20, 5);
        state.setPlayer(hero);

        Room square = new Room("–ü–ª–æ—â–∞–¥—å", "–ö–∞–º–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Å —Ñ–æ–Ω—Ç–∞–Ω–æ–º.");
        Room forest = new Room("–õ–µ—Å", "–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã –∏ –ø—Ç–∏—á–∏–π —â–µ–±–µ—Ç.");
        Room cave = new Room("–ü–µ—â–µ—Ä–∞", "–¢–µ–º–Ω–æ –∏ —Å—ã—Ä–æ. –ù–∞ —Å—Ç–µ–Ω–µ –≤–∏—Å–∏—Ç —Å—Ç–∞—Ä—ã–π –∫–ª—é—á.");
        Room treasure = new Room("–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞", "–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞ –∑–æ–ª–æ—Ç–∞ –∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π!");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏
        square.getNeighbors().put("north", forest);
        forest.getNeighbors().put("south", square);
        forest.getNeighbors().put("east", cave);
        cave.getNeighbors().put("west", forest);

        // –ó–∞–ø–µ—Ä—Ç–∞—è –¥–≤–µ—Ä—å –≤ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É (—Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á)
        cave.getNeighbors().put("north", treasure);
        treasure.getNeighbors().put("south", cave);
        treasure.setLocked(true);
        treasure.setRequiredKey("–°—Ç–∞—Ä—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –∫–ª—é—á");

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        forest.getItems().add(new Potion("–ú–∞–ª–æ–µ –∑–µ–ª—å–µ", 5));
        cave.getItems().add(new Key("–°—Ç–∞—Ä—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –∫–ª—é—á"));
        treasure.getItems().add(new Weapon("–ó–æ–ª–æ—Ç–æ–π –º–µ—á", 5));
        treasure.getItems().add(new Potion("–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ", 10));

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤
        forest.setMonster(new Monster("–í–æ–ª–∫", 1, 8));
        cave.setMonster(new Monster("–ì–æ–±–ª–∏–Ω", 2, 12));
        treasure.setMonster(new Monster("–î—Ä–∞–∫–æ–Ω", 5, 30));

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        SaveLoad.registerRoom(square);
        SaveLoad.registerRoom(forest);
        SaveLoad.registerRoom(cave);
        SaveLoad.registerRoom(treasure);

        state.setCurrent(square);
    }

    public void run() {
        System.out.println("DungeonMini. 'help' ‚Äî –∫–æ–º–∞–Ω–¥—ã.");

        try (BufferedReader in = new BufferedReader(new InputStreamReader(System.in))) {
            this.inputReader = in; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ fight

            while (true) {
                System.out.print("> ");
                String line = in.readLine();
                if (line == null) break;
                line = line.trim();
                if (line.isEmpty()) continue;

                List<String> parts = Arrays.asList(line.split("\\s+"));
                String cmd = parts.get(0).toLowerCase(Locale.ROOT);
                List<String> args = parts.size() > 1 ? parts.subList(1, parts.size()) : Collections.emptyList();

                Command command = commands.get(cmd);
                try {
                    if (command == null) throw new InvalidCommandException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + cmd);
                    command.execute(state, args);
                    state.addScore(1); // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É

                } catch (InvalidCommandException e) {
                    System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getClass().getSimpleName() + ": " + e.getMessage());
                    e.printStackTrace(); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                }
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞: " + e.getMessage());
        }
    }

    /*
     * –†–ê–ó–õ–ò–ß–ò–ï –û–®–ò–ë–û–ö –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò –ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
     *
     * 1) –û–®–ò–ë–ö–ò –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò - –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–æ–¥–∞:
     *
     *
     * // –ü—Ä–∏–º–µ—Ä 1: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã
     * // int number = "—Å—Ç—Ä–æ–∫–∞"; // error: incompatible types: String cannot be converted to int
     *
     * // –ü—Ä–∏–º–µ—Ä 2: –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
     * // unknownVariable = 5; // error: cannot find symbol
     *
     * // –ü—Ä–∏–º–µ—Ä 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç
     * // new NonExistentClass(); // error: cannot find symbol
     *
     * // –ü—Ä–∏–º–µ—Ä 4: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
     * // System.out.println("Hello world"  // error: ')' expected
     *
     * 2) –û–®–ò–ë–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø (Runtime exceptions) - –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:
     *    (—ç—Ç–æ—Ç –∫–æ–¥ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏)
     *
     * // –ü—Ä–∏–º–µ—Ä 1: ArithmeticException - –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
     * // int result = 10 / 0; // ArithmeticException: / by zero
     *
     * // –ü—Ä–∏–º–µ—Ä 2: NullPointerException - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ null
     * // String str = null;
     * // int length = str.length(); // NullPointerException
     *
     * // –ü—Ä–∏–º–µ—Ä 3: ArrayIndexOutOfBoundsException - –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
     * // int[] arr = new int[5];
     * // int value = arr[10]; // ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 5
     *
     * // –ü—Ä–∏–º–µ—Ä 4: ClassCastException - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
     * // Object obj = "—Å—Ç—Ä–æ–∫–∞";
     * // Integer num = (Integer) obj; // ClassCastException: java.lang.String cannot be cast to java.lang.Integer
     *
     * // –ü—Ä–∏–º–µ—Ä 5: NumberFormatException - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
     * // int num = Integer.parseInt("abc"); // NumberFormatException: For input string: "abc"
     *
     * 3) –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô –í –≠–¢–û–ú –ü–†–û–ï–ö–¢–ï:
     *
     * –í—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ InvalidCommandException:
     * - –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: throw new InvalidCommandException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + cmd)
     * - –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: throw new InvalidCommandException("–ù–µ–ª—å–∑—è –∏–¥—Ç–∏ –Ω–∞" + dir + " –æ—Ç—Å—é–¥–∞.")
     * - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã: throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: " + name)
     *
     * –≠—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏ –≤—ã–≤–æ–¥—è—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–û—à–∏–±–∫–∞: "
     */
}
